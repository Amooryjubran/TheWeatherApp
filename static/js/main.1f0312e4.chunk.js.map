{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","API_KEY","App","getWeather","e","a","async","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","descreption","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f0312e4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>\r\n                    {props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`} ></i>\r\n                </h5>\r\n                    {props.temp_celsius ? (<h1 className=\"py2\">{props.temp_celsius}&deg;</h1>):null}\r\n                {/** show max and min temp */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n                <h4 className=\"py-3\">\r\n                    {props.description}\r\n                </h4>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n        return(\r\n          <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n          </h3>\r\n        );\r\n    }\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? error():null}</div>\r\n            <form onSubmit={props.loadweather} >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2 \">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\" />\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left \">\r\n                    <button className=\"btn btn-info\">Get Weather</button>\r\n                    \r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\" >\r\n            Please Enter both City and Country\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n\nconst API_KEY = \"ccfb29deef47072a33122431dddf3106\";\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state= {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      descreption: \"\",\n      error: false\n    };\n    \n\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n\n\n\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather = async (e) =>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if(city && country){\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n        );\n  \n      const response = await api_call.json();\n      console.log(response);\n  \n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description\n        \n      });\n  \n      this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n    }else{\n      this.setState({error:true})\n    }\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        < Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city}\n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n         temp_max={this.state.temp_max}\n         temp_min={this.state.temp_min}\n         description={this.state.description}\n         weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}